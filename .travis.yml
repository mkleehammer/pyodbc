# To increase the output in the log, set the environment variable
# TRVS_VERBOSE to "true" in the repository settings in the Travis UI.

os: linux
dist: bionic
language: python

jobs:
  include:
    - name: Python2.7
      python: "2.7"
      env:
        - TESTS_DIR=tests2
    - name: Python3.6
      python: "3.6"
      env:
        - TESTS_DIR=tests3
    - name: Python3.7
      python: "3.7"
      env:
        - TESTS_DIR=tests3
    - name: Python3.8
      python: "3.8"
      env:
        - TESTS_DIR=tests3
    - name: Python3.9
      python: "3.9"
      env:
        - TESTS_DIR=tests3

env:
  global:
    - CURL_OUTPUT_FORMAT="%{http_code} %{filename_effective} %{size_download} %{time_total}"
    - MYSQL_DRIVER=mysql-connector-odbc-8.0.22-linux-glibc2.12-x86-64bit
    - UNIXODBC_DM=unixODBC-2.3.9

services:
  - docker
  - mysql
  - postgresql

addons:
  postgresql: "11"
  apt:
    packages:
      - unixodbc
      - unixodbc-dev
      - odbc-postgresql

cache:
  directories:
    - travis_cache

install:
  # show cache
  - mkdir "$TRAVIS_BUILD_DIR/travis_cache" || true
  - ls -l "$TRAVIS_BUILD_DIR/travis_cache"
  # install the latest unixODBC driver manager (v2.3.4 is 5 years old and buggy)
  # https://docs.microsoft.com/en-us/sql/connect/odbc/linux-mac/installing-the-driver-manager
  - odbcinst --version
  - cd /tmp
  - |
    if [ -f "$TRAVIS_BUILD_DIR/travis_cache/${UNIXODBC_DM}.tar.gz" ]; then
      cp -v "$TRAVIS_BUILD_DIR/travis_cache/${UNIXODBC_DM}.tar.gz" .
    else
      curl -sS -w "$CURL_OUTPUT_FORMAT" -O "http://www.unixodbc.org/${UNIXODBC_DM}.tar.gz"
    fi
  - ls -l "${UNIXODBC_DM}.tar.gz"
  - |
    if [ ! -f "$TRAVIS_BUILD_DIR/travis_cache/${UNIXODBC_DM}.tar.gz" ]; then
      cp -v "${UNIXODBC_DM}.tar.gz" "$TRAVIS_BUILD_DIR/travis_cache"
    fi
  - tar -xz -f "${UNIXODBC_DM}.tar.gz"
  - cd "${UNIXODBC_DM}"
  - CPPFLAGS="-DSIZEOF_LONG_INT=8"
  - export CPPFLAGS
  - ./configure --prefix=/usr --sysconfdir=/etc --enable-iconv --with-iconv-char-enc=UTF8 --with-iconv-ucode-enc=UTF16LE 1> zzz_log_configure_std 2> zzz_log_configure_err
  - make 1> zzz_log_make_std 2> zzz_log_make_err
  - sudo make install 1> zzz_log_install_std 2> zzz_log_install_err
  - odbcinst --version
  # install MSSQL driver
  - sudo bash -c 'curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -'
  - sudo bash -c 'curl https://packages.microsoft.com/config/ubuntu/18.04/prod.list > /etc/apt/sources.list.d/mssql-release.list'
  - sudo apt-get update
  - sudo ACCEPT_EULA=Y apt-get install msodbcsql17
  # install MySQL driver
  - cd /tmp
  - |
    if [ -f "$TRAVIS_BUILD_DIR/travis_cache/${MYSQL_DRIVER}.tar.gz" ]; then
      cp -v "$TRAVIS_BUILD_DIR/travis_cache/${MYSQL_DRIVER}.tar.gz" .
    else
      curl -sS -w "$CURL_OUTPUT_FORMAT" -O "https://www.mirrorservice.org/sites/ftp.mysql.com/Downloads/Connector-ODBC/8.0/${MYSQL_DRIVER}.tar.gz"
    fi
  - ls -l "${MYSQL_DRIVER}.tar.gz"
  - |
    if [ ! -f "$TRAVIS_BUILD_DIR/travis_cache/${MYSQL_DRIVER}.tar.gz" ]; then
      cp -v "${MYSQL_DRIVER}.tar.gz" "$TRAVIS_BUILD_DIR/travis_cache"
    fi
  - tar -v -xz -f "${MYSQL_DRIVER}.tar.gz"
  - sudo cp -v "${MYSQL_DRIVER}/lib/libmyodbc8a.so" /usr/lib/x86_64-linux-gnu/odbc/
  - sudo chmod a+r /usr/lib/x86_64-linux-gnu/odbc/libmyodbc8a.so
  - echo '[MySQL ODBC 8.0 ANSI Driver]' > mysql_odbcinst.ini
  - echo 'Driver      = /usr/lib/x86_64-linux-gnu/odbc/libmyodbc8a.so' >> mysql_odbcinst.ini
  - echo 'UsageCount  = 1' >> mysql_odbcinst.ini
  - echo 'Threading   = 2' >> mysql_odbcinst.ini
  - sudo odbcinst -i -d -f mysql_odbcinst.ini
  # show cache
  - ls -l "$TRAVIS_BUILD_DIR/travis_cache"
  # odbc info
  - odbcinst -j
  - cat /etc/odbcinst.ini
  - cat /etc/odbc.ini
  # install pyodbc
  - cd "$TRAVIS_BUILD_DIR"
  - python -VV
  - python setup.py install
  - python -m pip freeze --all
  - python -c "import pyodbc; print(pyodbc.version)"

before_script:
  # set up SQL Server 2017 and 2019 in docker containers
  - docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=StrongPassword2017' -p 1401:1433 --name mssql2017 -d mcr.microsoft.com/mssql/server:2017-latest
  - docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=StrongPassword2019' -p 1402:1433 --name mssql2019 -d mcr.microsoft.com/mssql/server:2019-latest
  - sleep 10  # MSSQL in docker needs time to warm up: https://github.com/microsoft/mssql-docker/issues/203
  # create test databases in SQL Server
  - docker exec -it mssql2017 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2017' -Q "SELECT @@VERSION" || sleep 5
  - docker exec -it mssql2017 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2017' -Q "CREATE DATABASE test"
  - docker exec -it mssql2019 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2019' -Q "SELECT @@VERSION" || sleep 5
  - docker exec -it mssql2019 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'StrongPassword2019' -Q "CREATE DATABASE test"
  # create test database in PostgreSQL
  - psql -c "SELECT version()" -U postgres
  - psql -c "CREATE DATABASE test WITH encoding='UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8'" -U postgres
  - psql -l
  # create test database in MySQL
  - mysql -e "STATUS"
  - mysql -e "CREATE DATABASE test"

script:
  - cd "$TRAVIS_BUILD_DIR"
  - if [ "$TRVS_VERBOSE" = "true" ]; then TESTARGS="--verbose"; else TESTARGS=""; fi
  # run SQL Server tests on MSSQL2017
  - python "./$TESTS_DIR/sqlservertests.py" $TESTARGS "DRIVER={ODBC Driver 17 for SQL Server};SERVER=localhost,1401;UID=sa;PWD=StrongPassword2017;DATABASE=test"
  # run SQL Server tests on MSSQL2019
  - python "./$TESTS_DIR/sqlservertests.py" $TESTARGS "DRIVER={ODBC Driver 17 for SQL Server};SERVER=localhost,1402;UID=sa;PWD=StrongPassword2019;DATABASE=test"
  # run PostgreSQL tests
  - python "./$TESTS_DIR/pgtests.py" $TESTARGS "DRIVER={PostgreSQL Unicode};SERVER=localhost;UID=postgres;DATABASE=test"
  # run MySQL tests
  - python "./$TESTS_DIR/mysqltests.py" $TESTARGS "DRIVER={MySQL ODBC 8.0 ANSI Driver};SERVER=localhost;DATABASE=test;CHARSET=utf8mb4"
